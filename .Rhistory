?devtools::release
devtools::build()
library(lslx)
?lslx
vignette("factor-analysis")
vignette("regression-analysis")
?lslx
library(lslx)
?lslx
library(lslx)
devtools::build()
devtools::build()
?lslx
install.packages("lslx")
library(lslx)
?lslx
library(lslx)
?lslx
library(lslx)
library(lsl)
?`lsl-package`
Sys.info
Sys.info()
system()
gc()
?microbenchmark::microbenchmark()
sessionInfo()
?sessionInfo()
str(sessionInfo())
sessionInfo()$R.version
R.Version()
R.cersion
R.version
version
library(lslx)
model <-
'
visual  :=> fix(1)* x1 + x2 + x3
textual :=> fix(1)* x4 + x5 + x6
speed   :=> fix(1)* x7 + x8 + x9
visual  :~> x4 + x5 + x6 + x7 + x8 + x9
textual :~> x1 + x2 + x3 + x7 + x8 + x9
speed   :~> x1 + x2 + x3 + x4 + x5 + x6
'
r6_lslx <- lslx$new(model = model,
data = lavaan::HolzingerSwineford1939,
verbose = FALSE)
r6_lslx$fit(penalty_method = "mcp",
lambda_grid = seq(.01, .3, .01),
delta_grid = 5,
verbose = FALSE)
lambda <- matrix(NA, 9, 3)
lambda[c(1, 2, 3), 1] <- lambda[c(4, 5, 6), 2] <- lambda[c(7, 8, 9), 3] <- 1
rc_sem <- lslSEM()
rc_sem$input(raw = lavaan::HolzingerSwineford1939)
rc_sem$specify(pattern = list(lambda = lambda))
rc_sem$learn(penalty = list(type = "mcp",
gamma = seq(.01, .3, .01),
delta = 5),
variable = 7:15)
rc_sem
rc_sem$overall
rc_sem$structure$overall
rc_sem$structure$overall[,,"dt=5"]
rc_sem$structure$overall[dpl,,"dt=5"]
rc_sem$structure$overall["dpl",,"dt=5"]
knitr::opts_chunk$set(echo = TRUE)
sapply(r6_lslx$get_fitting()$fitted_result$numerical_condition,
FUN = function(x) {getElement(x, "objective_value")})
objective_value_lsl <- rc_sem$structure$overall["dpl",,"dt=5"]
objective_value_lsl <- sapply(r6_lslx$get_fitting()$fitted_result$numerical_condition,
FUN = function(x) {getElement(x, "objective_value")})
objective_value_lsl <- rc_sem$structure$overall["dpl",,"dt=5"]
objective_value_lsl <- sapply(r6_lslx$get_fitting()$fitted_result$numerical_condition,
FUN = function(x) {getElement(x, "objective_value")})
objective_value_lsl
objective_value_lsl <- rc_sem$structure$overall["dpl",,"dt=5"]
objective_value_lslx <- sapply(r6_lslx$get_fitting()$fitted_result$numerical_condition,
FUN = function(x) {getElement(x, "objective_value")})
objective_value_lsl
library(lslx)
model <-
'
visual  :=> fix(1)* x1 + x2 + x3
textual :=> fix(1)* x4 + x5 + x6
speed   :=> fix(1)* x7 + x8 + x9
visual  :~> x4 + x5 + x6 + x7 + x8 + x9
textual :~> x1 + x2 + x3 + x7 + x8 + x9
speed   :~> x1 + x2 + x3 + x4 + x5 + x6
'
r6_lslx <- lslx$new(model = model,
data = lavaan::HolzingerSwineford1939,
verbose = FALSE)
r6_lslx$fit(penalty_method = "mcp",
lambda_grid = seq(.01, .3, .01),
delta_grid = 5,
verbose = FALSE)
objective_value_lsl <- rc_sem$structure$overall["dpl",,"dt=5"]
objective_value_lslx <- sapply(r6_lslx$get_fitting()$fitted_result$numerical_condition,
FUN = function(x) {getElement(x, "objective_value")})
objective_value_lsl - objective_value_lslx
library(lslx)
model <-
'
visual  :=> fix(1)* x1 + x2 + x3
textual :=> fix(1)* x4 + x5 + x6
speed   :=> fix(1)* x7 + x8 + x9
visual  :~> x4 + x5 + x6 + x7 + x8 + x9
textual :~> x1 + x2 + x3 + x7 + x8 + x9
speed   :~> x1 + x2 + x3 + x4 + x5 + x6
'
r6_lslx <- lslx$new(model = model,
data = lavaan::HolzingerSwineford1939,
verbose = FALSE)
r6_lslx$fit(penalty_method = "mcp",
lambda_grid = seq(.01, .3, .01),
delta_grid = 5,
verbose = FALSE)
library(lsl)
lambda <- matrix(NA, 9, 3)
lambda[c(1, 2, 3), 1] <- lambda[c(4, 5, 6), 2] <- lambda[c(7, 8, 9), 3] <- 1
rc_sem <- lslSEM()
rc_sem$input(raw = lavaan::HolzingerSwineford1939)
rc_sem$specify(pattern = list(lambda = lambda))
rc_sem$learn(penalty = list(type = "mcp",
gamma = seq(.01, .3, .01),
delta = 5),
variable = 7:15)
objective_value_lsl <- rc_sem$structure$overall["dpl",,"dt=5"]
objective_value_lslx <- sapply(r6_lslx$get_fitting()$fitted_result$numerical_condition,
FUN = function(x) {getElement(x, "objective_value")})
objective_value_lsl - objective_value_lslx
r6_lslx$summarize("bic")
objective_value_lslx
?rev
rev(sapply(r6_lslx$get_fitting()$fitted_result$numerical_condition,
FUN = function(x) {getElement(x, "objective_value")}))
objective_value_lsl - objective_value_lslx
objective_value_lsl <- rc_sem$structure$overall["dpl",,"dt=5"]
objective_value_lslx <- rev(sapply(r6_lslx$get_fitting()$fitted_result$numerical_condition,
FUN = function(x) {getElement(x, "objective_value")}))
objective_value_lsl - objective_value_lslx
rc_sem$summarize(type = "individual")
rc_sem$summarize(type = "individual")
r6_lslx$extract_coefficient_matrice(selector = "bic",
block = "y<-f")
rc_sem$summarize(type = "individual")
r6_lslx$extract_coefficient_matrice(selector = "bic",
block = "y<-f")
?lavaan::PoliticalDemocracy
knitr::opts_chunk$set(echo = TRUE)
options(width = 100)
model <-
'
fix(1) * y1 + y2 + y3 + y4 <=: dem60
fix(1) * y5 + y6 + y7 + y8 <=: dem65
fix(1) * x1 + x2 + x3      <=: ind60
dem60 <= ind60
dem65 <= ind60 + dem60
'
# create an lslx object via specified model and sample covariance matrix
r6_lslx <- lslx$new(model = model,
data = lavaan::PoliticalDemocracy)
# set some covariances of errors as penalized parameters
r6_lslx$penalize_coefficient(name = c("y1<->y5",
"y2<->y4",
"y2<->y6",
"y3<->y7",
"y4<->y8",
"y6<->y8"))
r6_lslx$fit_mcp(lambda_grid = seq(.01, .3, .01),
delta_grid = 20)
library(lslx)
model <-
'
fix(1) * y1 + y2 + y3 + y4 <=: dem60
fix(1) * y5 + y6 + y7 + y8 <=: dem65
fix(1) * x1 + x2 + x3      <=: ind60
dem60 <= ind60
dem65 <= ind60 + dem60
'
# create an lslx object via specified model and sample covariance matrix
r6_lslx <- lslx$new(model = model,
data = lavaan::PoliticalDemocracy)
# set some covariances of errors as penalized parameters
r6_lslx$penalize_coefficient(name = c("y1<->y5",
"y2<->y4",
"y2<->y6",
"y3<->y7",
"y4<->y8",
"y6<->y8"))
r6_lslx$fit_mcp(lambda_grid = seq(.01, .3, .01),
delta_grid = 10)
model <-
'
fix(1) * y1 + y2 + y3 + y4 <=: dem60
fix(1) * y5 + y6 + y7 + y8 <=: dem65
fix(1) * x1 + x2 + x3      <=: ind60
dem60 <= ind60
dem65 <= ind60 + dem60
'
# create an lslx object via specified model and sample covariance matrix
r6_lslx <- lslx$new(model = model,
data = lavaan::PoliticalDemocracy)
# set some covariances of errors as penalized parameters
r6_lslx$penalize_coefficient(name = c("y1<->y5",
"y2<->y4",
"y2<->y6",
"y3<->y7",
"y4<->y8",
"y6<->y8"))
r6_lslx$fit_mcp(lambda_grid = seq(.01, .3, .01),
delta_grid = 20)
model <-
'
fix(1) * y1 + y2 + y3 + y4 <=: dem60
fix(1) * y5 + y6 + y7 + y8 <=: dem65
fix(1) * x1 + x2 + x3      <=: ind60
dem60 <= ind60
dem65 <= ind60 + dem60
'
# create an lslx object via specified model and sample covariance matrix
r6_lslx <- lslx$new(model = model,
data = lavaan::PoliticalDemocracy)
# set some covariances of errors as penalized parameters
r6_lslx$penalize_coefficient(name = c("y1<->y5",
"y2<->y4",
"y2<->y6",
"y3<->y7",
"y4<->y8",
"y6<->y8"))
r6_lslx$fit_mcp(lambda_grid = seq(.01, .3, .01),
delta_grid = 20)
lambda <- matrix(0, 11, 3)
lambda[1:4, 1] <- lambda[5:8, 2] <- lambda[9:11, 3] <- 1
psi <- diag(1, 11)
psi[5, 1] <- psi[4, 2] <- psi[6, 2] <- psi[7, 3] <- psi[8, 4] <- psi[8, 6] <- NA
beta <- matrix(0, 3, 3)
beta[1, 3] <- beta[2, 1] <- beta[2, 3] <- 1
phi <- diag(1, 3)
rc_sem <- lslSEM()
rc_sem$input(raw = lavaan::PoliticalDemocracy)
rc_sem$specify(pattern = list(lambda = lambda, psi = psi, beta = beta, phi = phi))
rc_sem$learn(penalty = list(type = "mcp",
gamma = seq(.01, .3, .01),
delta = 20))
objective_value_lsl <- rc_sem$structure$overall["dpl", ,"dt=20"]
objective_value_lslx <- rev(sapply(r6_lslx$get_fitting()$fitted_result$numerical_condition,
FUN = function(x) {getElement(x, "objective_value")}))
objective_value_lsl - objective_value_lslx
objective_value_lsl
objective_value_lslx
rc_sem$summarize(type = "overall")
rc_sem$summarize(type = "individual")
r6_lslx$summarize(selector = "aic", exclude_improper = FALSE)
r6_lslx$summarize(selector = "bic", exclude_improper = FALSE)
rc_sem$summarize(type = "overall")
rc_sem$summarize(type = "individual")
lavaan::PoliticalDemocracy
devtools::build()
knitr::opts_chunk$set(echo = TRUE)
options(width = 100)
library(lslx)
model_lslx <-
"f1 :=> fix(1) * x1 + pen() * x2 + pen() * x3 + x4 + x5 + x6 + pen() * x7 + pen() * x8 + pen() * x9"
r6_lslx <- lslx$new(model = model_lslx,
data = lavaan::HolzingerSwineford1939[, 7:15])
r6_lslx$fit_lasso(lambda_grid = 1, verbose = FALSE)
library(lslx)
model_lslx <-
"f1 :=> fix(1) * x1 + pen() * x2 + pen() * x3 + x4 + x5 + x6 + pen() * x7 + pen() * x8 + pen() * x9"
r6_lslx <- lslx$new(model = model_lslx,
data = lavaan::HolzingerSwineford1939[, 7:15])
r6_lslx$fit_lasso(lambda_grid = 1, verbose = FALSE)
r6_lslx$summarize()
r6_lslx$fit_lasso(lambda_grid = 0.2, verbose = FALSE)
r6_lslx$summarize()
r6_lslx$fit_lasso(lambda_grid = 0.1, verbose = FALSE)
r6_lslx$summarize()
model_lslx <-
"f1 :=> fix(1) * x1 + pen() * x2 + pen() * x3 + x4 + x5 + x6 + pen() * x7 + pen() * x8 + pen() * x9"
r6_lslx <- lslx$new(model = model_lslx,
data = lavaan::HolzingerSwineford1939)
r6_lslx$fit_lasso(lambda_grid = 0.2, verbose = FALSE)
library(regsem)
model_lavaan <-
"f =~ 1 * x1 + l1 * x2 + l2 * x3 + l3 * x4 + l4 * x5 + l5 * x6 + l6 * x7 + l7 * x8 + l8 * x9"
fit_lavaan <- lavaan::cfa(model = model_lavaan,
data = lavaan::HolzingerSwineford1939,
meanstructure = TRUE)
fit_regsem <- regsem(fit_lavaan, lambda = 0.1, type = "lasso",
alpha = 0, optMethod = "coord_desc",
pars_pen=c("l1", "l2", "l6", "l7", "l8"))
fit_regsem
?regsem
r6_lslx$extract_numerical_condition()["objective_value"]
fit_regsem
fit_lavaan
fitmeasures(fit_lavaan)
fit_regsem_0 <- regsem(fit_lavaan, lambda = 0, type = "lasso",
pars_pen = c("l1", "l2", "l6", "l7", "l8"))
fit_regsem_0$out$value * nrow(lavaan::HolzingerSwineford1939)
fitmeasures(fit_lavaan)["chisq"]
fit_regsem
fit_regsem$coefficients[c("f -> x2", "f -> x3", "f -> x7", "f -> x8", "f -> x9")]
library(regsem)
r6_lslx$extract_objective_gradient()
?sort
rc_sem$summarize(type = "overall")["dpl", "bic optimal"]
packageVersion("lslx")
?regsem
model_lavaan <-
"f =~ 1 * x1 + l1 * x2 + l2 * x3 + l3 * x4 + l4 * x5 + l5 * x6 + l6 * x7 + l7 * x8 + l8 * x9"
fit_lavaan <- lavaan::cfa(model = model_lavaan,
data = lavaan::HolzingerSwineford1939,
meanstructure = TRUE)
fit_regsem <- regsem(fit_lavaan, lambda = 0.1, type = "lasso",
solver = TRUE, quasi = TRUE,
solver.maxit = 100, line.search = TRUE,
pars_pen = c("l1", "l2", "l6", "l7", "l8"))
fit_regsem
fit_regsem <- regsem(fit_lavaan, lambda = 0.1, type = "mcp",
pars_pen = c("l1", "l2", "l6", "l7", "l8"),
solver = TRUE, quasi = TRUE,
solver.maxit = 100, line.search = TRUE)
fit_regsem
model <-
'
fix(1) * y1 + y2 + y3 + y4 <=: dem60
fix(1) * y5 + y6 + y7 + y8 <=: dem65
fix(1) * x1 + x2 + x3      <=: ind60
dem60 <= ind60
dem65 <= ind60 + dem60
'
# create an lslx object via specified model and sample covariance matrix
r6_lslx <- lslx$new(model = model,
data = lavaan::PoliticalDemocracy)
# set some covariances of errors as penalized parameters
r6_lslx$penalize_coefficient(name = c("y1<->y5",
"y2<->y4",
"y2<->y6",
"y3<->y7",
"y4<->y8",
"y6<->y8"))
r6_lslx$fit_mcp(lambda_grid = 0,
delta_grid = 20)
library(lslx)
model <-
'
fix(1) * y1 + y2 + y3 + y4 <=: dem60
fix(1) * y5 + y6 + y7 + y8 <=: dem65
fix(1) * x1 + x2 + x3      <=: ind60
dem60 <= ind60
dem65 <= ind60 + dem60
'
# create an lslx object via specified model and sample covariance matrix
r6_lslx <- lslx$new(model = model,
data = lavaan::PoliticalDemocracy)
# set some covariances of errors as penalized parameters
r6_lslx$penalize_coefficient(name = c("y1<->y5",
"y2<->y4",
"y2<->y6",
"y3<->y7",
"y4<->y8",
"y6<->y8"))
r6_lslx$fit_mcp(lambda_grid = 0,
delta_grid = 20)
r6_lslx$summarize()
library(lslx)
library(lslx)
library(lslx)
library(lslx)
library(lslx)
library(lslx)
library(lslx)
library(lslx)
library(lslx)
library(lslx)
library(lslx)
